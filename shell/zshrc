################################################################################
# SHELL
################################################################################

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LESSCHARSET=UTF-8

export EDITOR=nvim

if [[ "$(uname | tr '[A-Z]' '[a-z]')" == 'darwin' ]]; then
    export OS='darwin'
elif uname -r | grep --quiet arch; then
    export OS='arch'
else
    echo 'Unknown OS' >&2
    print_usage
    exit 1
fi

################################################################################
# OH-MY-ZSH CONFIGURATION
################################################################################

export ZSH="${HOME}/.oh-my-zsh"

plugins=(
  osx
  colored-man-pages
  aws
)


################################################################################
# ZSH INITIALIZATION
################################################################################

source $ZSH/oh-my-zsh.sh
source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

unsetopt share_history
setopt no_share_history

autoload -U +X bashcompinit && bashcompinit

eval "$(starship init zsh)"

# Undo all of ohmyzsh alias entries
unalias -m '*'


################################################################################
# VIM MODE CONFIG
################################################################################

bindkey -v
export KEYTIMEOUT=1

# Change cursor shape for different vi modes.
function zle-keymap-select {
  if [[ ${KEYMAP} == vicmd ]] ||
     [[ $1 = 'block' ]]; then
    echo -ne '\e[1 q'
  elif [[ ${KEYMAP} == main ]] ||
       [[ ${KEYMAP} == viins ]] ||
       [[ ${KEYMAP} = '' ]] ||
       [[ $1 = 'beam' ]]; then
    echo -ne '\e[5 q'
  fi
}

zle -N zle-keymap-select

zle-line-init() {
    zle -K viins # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
    echo -ne "\e[5 q"
}

zle -N zle-line-init
echo -ne '\e[5 q' # Use beam shape cursor on startup.

preexec() {
    echo -ne '\e[5 q'
} # Use beam shape cursor for each new prompt.


################################################################################
# PATHS
################################################################################

export PATH=$PATH:"${HOME}/bin"
export PATH="$HOME/.cargo/bin:$PATH"
export PATH=$PATH:"/Applications/Visual Studio Code.app/Contents/Resources/app/bin"
export PATH=$PATH:'/Users/connorpower/.dotnet/tools'


################################################################################
# Android Studio
################################################################################

export ANDROID_SDK_ROOT="${HOME}/Library/Android/sdk"


################################################################################
# GPG
################################################################################

export GPG_TTY=$(TTY)


################################################################################
# RUBY
################################################################################

eval "$(rbenv init -)"


################################################################################
# NODE
################################################################################

export NVM_DIR="$HOME/.nvm"
if [[ -s "/usr/local/opt/nvm/nvm.sh" ]]; then
    . "/usr/local/opt/nvm/nvm.sh"
fi
if [[ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm" ]]; then
    . "/usr/local/opt/nvm/etc/bash_completion.d/nvm"
fi


################################################################################
# AWS
################################################################################

source "${HOME}/bin/aws-utils.sh"


################################################################################
# Rust
################################################################################

alias rmtgt='rm -rf ./target'


################################################################################
# Ditto/HyDRA
################################################################################

export QUAY_USER='connorpowerditto'
export DITTO_LICENSE=$(cat ~/.ditto/license)
export KAFKA_BOOTSTRAP_HOST=localhost:9092

# File descriptor hungry Ditto tests
ulimit -n 4096


################################################################################
# UTILITY FUNCTIONS
################################################################################

date_iso_8601() {
    if [[ ! -z "${1}" ]]; then
        # Expects input in form of `date +%s`
        date -u -r "${1}" +%Y-%m-%dT%H:%M:%SZ
    else
        date -u +%Y-%m-%dT%H:%M:%SZ
    fi
}


################################################################################
# ALIASES
################################################################################

DEVELOPER_DIR="${HOME}/Developer"

alias cdddev='cd "${DEVELOPER_DIR}/ditto/ditto"'
alias cdpdev='cd "${DEVELOPER_DIR}/personal"'

alias cdpno='cd "${DEVELOPER_DIR}/personal/notes/personal"'
alias cdfno='cd "${DEVELOPER_DIR}/personal/notes/family"'
alias cddno='cd "${DEVELOPER_DIR}/personal/notes/ditto"'

alias o='open .'
alias ow='open ./*.xcworkspace'

alias gs='git status'
alias gitstats='git shortlog -sn'

# Diff git changes with bat syntax highlighting
batdiff() {
    git diff --name-only --relative --diff-filter=d | xargs bat --diff
}

# Modern alternative to du, but print in intuitive order
alias dust='dust -r'

# Flush local DNS cache
alias dns_flush='sudo killall -HUP mDNSResponder; sleep 2;'

# Preview with QuickLook
alias qlf='qlmanage -p "$@" &> /dev/null'

alias mon='ddcctl -d 1 -b $1 > /dev/null'

alias font-test="echo -e '\e[1mbold\e[0m\n\e[3mitalic\e[0m\n\e[4munderline\e[0m\n\e[9mstrikethrough\e[0m'"

################################################################################
# JAVA
################################################################################

export PATH="$HOME/.jenv/bin:$PATH"
eval "$(jenv init -)"

################################################################################
# Sit/Stand Timer
################################################################################

# Sitting. Set a 20 min timer before transitioning to stand.
# http://ergo.human.cornell.edu/CUESitStand.html
st() {
    timer_announce $(( 20 * 60 )) "Time to stand up"
}

# Standing. Set an 8 min timer before transitioning to walking around a bit.
# http://ergo.human.cornell.edu/CUESitStand.html
sd() {
    timer_announce $(( 8 * 60 )) "Time to walk around a bit"
    # Start a stop watch to keep track if walking around runs over
    sw
}

# Walking. Set a 2 min timer before transitioning to sitting.
# http://ergo.human.cornell.edu/CUESitStand.html
wl() {
    timer_announce $(( 2 * 60 )) "Time to sit down"
}

# Play an announcement sound and display message after a timer (seconds) elapses.
# $1: duration (secs)
# $2: terminal message
timer_announce() {
    if [[ $# -ne 2 ]]; then
        echo "usage: timer_sound duration msg" >&2
        return 1
    fi

    case "${OS}" in
        'darwin')
            sleep $1
            echo "${2}"
            say "${2}"
            ;;
        'arch')
            echo "TODO..." >&2
            ;;
        *)
            echo "unsupported OS" >&2
        ;;
    esac
}

